# -*- coding: utf-8 -*-
"""ML_detects_diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10S-NbDwQUpxxfdr18llN7erg45rqRdZf
"""

# Following lesson on https://www.youtube.com/watch?v=y3qZFu3gmYE
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from PIL import Image

#!pip install streamlit

import streamlit as st

st.write("""
#Diabetes detection
Detect if someone has diabetes using ML and python
""")

#Open and display image
#image = Image.open('/content/drive/My Drive/Colab Notebooks/diabetes.png')
image = Image.open('diabetes.png')

st.image(image, caption='ML', use_column_width=True)

# Get the data
# Load the data
#from google.colab import files
#uploaded = files.upload()
# this library allows us to upload data from our computer
df = pd.read_csv('diabetes.csv')

df.shape

df.head(4)

st.subheader('Data Info:')
# Show data as a table
st.dataframe(df)
# Show statistics
st.write(df.describe())
chart = st.bar_chart(df)

# Split the data into independent X and dependent Y variables
# X contains all features
X = df.iloc[:, 0:8].values
Y = df.iloc[:,-1].values

# Split the dataset into 75% training and 25% testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)

# Get the feature input from the user
def get_user_input():
  pregnancies	= st.sidebar.slider('pregnancies', 0, 17, 3)
  glucose = st.sidebar.slider('glucose', 0, 199, 117) # starting, end values and defaul value
  blood_pressure =	st.sidebar.slider('blood_pressure', 0, 122, 72)
  skin_thickness	= st.sidebar.slider('skin_thickness', 0, 99, 23)
  insulin	= st.sidebar.slider('insulin', 0.0, 846.0, 30.0)
  BMI	= st.sidebar.slider('BMI', 0.0, 67.1, 32.0)
  DPF = st.sidebar.slider('DPF', 0.078, 2.42, 0.3725)
  Age	= st.sidebar.slider('Age', 21, 81, 29)
  # Store a dictionary
  user_data = {'pregnancies': pregnancies,
               'glucose': glucose,
               'blood_pressure': blood_pressure,	
               'skin_thickness': skin_thickness,	
               'insulin': insulin,	
               'BMI': BMI,	
               'DPF':DPF,
               'Age':Age
               }
  # Transform the data into a data frame
  features = pd.DataFrame(user_data, index=[0])
  return features
# Store the user data into a variable
user_input = get_user_input()

# Set a subheader and display the users input
st.subheader('User Input:')
st.write(user_input)





# Create and train the model
RandomForestClassifier = RandomForestClassifier()
RandomForestClassifier.fit(X_train, Y_train)

# Show the model metrics
st.subheader('Show the model test accuracy score: ')
st.write(str(accuracy_score(Y_test, RandomForestClassifier.predict(X_test))*100)+'%')

# Show model metrics
st.subheader('Model test accuracy score:')
st.write(str(accuracy_score(Y_test, RandomForestClassifier.predict(X_test))*100)+'%')

# Store the models predictions in a variable
prediction = RandomForestClassifier.predict(user_input)

# Set a subheader and display the classifier
st.subheader('Classification: ')
st.write(prediction)

"""# New Section

# New Section
"""